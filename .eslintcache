[{"/home/viraj007/Desktop/IN03-LeoCode/src/index.js":"1","/home/viraj007/Desktop/IN03-LeoCode/src/App.js":"2","/home/viraj007/Desktop/IN03-LeoCode/src/serviceWorkerRegistration.js":"3","/home/viraj007/Desktop/IN03-LeoCode/src/theme.js":"4","/home/viraj007/Desktop/IN03-LeoCode/src/pages/index.js":"5","/home/viraj007/Desktop/IN03-LeoCode/src/pages/auth/index.js":"6","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/index.js":"7","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/index.js":"8","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/review/index.jsx":"9","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/home/index.jsx":"10","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/home/index.jsx":"11","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/review/index.jsx":"12","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/index.jsx":"13","/home/viraj007/Desktop/IN03-LeoCode/src/pages/auth/registration/index.jsx":"14","/home/viraj007/Desktop/IN03-LeoCode/src/pages/auth/login/index.jsx":"15","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/index.jsx":"16","/home/viraj007/Desktop/IN03-LeoCode/src/config.js":"17","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/home/examCard.jsx":"18","/home/viraj007/Desktop/IN03-LeoCode/src/components/loading.jsx":"19","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/home/passwordModal.jsx":"20","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/timeVideoComponent.jsx":"21","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/questionNumberCard.jsx":"22","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/questionCard.jsx":"23","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/successDialog.jsx":"24","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/loadingDialog.jsx":"25","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/QuestionModal.jsx":"26","/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/submitDialog.jsx":"27","/home/viraj007/Desktop/IN03-LeoCode/src/hooks/useSecureStorage.jsx":"28","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/review/questionCard.jsx":"29","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/countdownTimer.jsx":"30","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/video/index.jsx":"31"},{"size":568,"mtime":1615020815725,"results":"32","hashOfConfig":"33"},{"size":1174,"mtime":1615020815725,"results":"34","hashOfConfig":"33"},{"size":5966,"mtime":1615020815725,"results":"35","hashOfConfig":"33"},{"size":396,"mtime":1615020815725,"results":"36","hashOfConfig":"33"},{"size":150,"mtime":1615020815725,"results":"37","hashOfConfig":"33"},{"size":98,"mtime":1615020815725,"results":"38","hashOfConfig":"33"},{"size":135,"mtime":1615020815725,"results":"39","hashOfConfig":"33"},{"size":142,"mtime":1615020815725,"results":"40","hashOfConfig":"33"},{"size":10593,"mtime":1615020815725,"results":"41","hashOfConfig":"33"},{"size":2133,"mtime":1615020815725,"results":"42","hashOfConfig":"33"},{"size":2962,"mtime":1615034971183,"results":"43","hashOfConfig":"33"},{"size":8573,"mtime":1615031559396,"results":"44","hashOfConfig":"33"},{"size":4283,"mtime":1615034835209,"results":"45","hashOfConfig":"33"},{"size":7000,"mtime":1615020815725,"results":"46","hashOfConfig":"33"},{"size":4746,"mtime":1615027834855,"results":"47","hashOfConfig":"33"},{"size":13812,"mtime":1615034188514,"results":"48","hashOfConfig":"33"},{"size":930,"mtime":1615031559396,"results":"49","hashOfConfig":"33"},{"size":14866,"mtime":1615031559396,"results":"50","hashOfConfig":"33"},{"size":452,"mtime":1615020815725,"results":"51","hashOfConfig":"33"},{"size":2514,"mtime":1615020815725,"results":"52","hashOfConfig":"33"},{"size":810,"mtime":1615020815725,"results":"53","hashOfConfig":"33"},{"size":1032,"mtime":1615020815725,"results":"54","hashOfConfig":"33"},{"size":6438,"mtime":1615024784690,"results":"55","hashOfConfig":"33"},{"size":2710,"mtime":1615020815725,"results":"56","hashOfConfig":"33"},{"size":998,"mtime":1615020815725,"results":"57","hashOfConfig":"33"},{"size":5493,"mtime":1615022385403,"results":"58","hashOfConfig":"33"},{"size":1769,"mtime":1615020815725,"results":"59","hashOfConfig":"33"},{"size":487,"mtime":1615020815725,"results":"60","hashOfConfig":"33"},{"size":1826,"mtime":1615031559396,"results":"61","hashOfConfig":"33"},{"size":1926,"mtime":1615020815725,"results":"62","hashOfConfig":"33"},{"size":6472,"mtime":1615031559396,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nmhdkd",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},"/home/viraj007/Desktop/IN03-LeoCode/src/index.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/App.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/serviceWorkerRegistration.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/theme.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/index.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/auth/index.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/index.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/index.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/review/index.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/home/index.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/home/index.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/review/index.jsx",["130"],"import {\n    Button,\n    CardContent,\n    Divider,\n    Card,\n    Grid,\n    Typography,\n} from \"@material-ui/core\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { Skeleton } from \"@material-ui/lab\";\nimport axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { backendURL, secureStorage } from \"../../../config\";\nimport QuestionCard from \"./questionCard\";\n\nclass Review extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questionAnswer: [],\n            exam: {},\n            answer: {},\n            loading: true,\n            marksObtained: 0,\n            totalMarks: 0,\n        };\n    }\n    async componentDidMount() {\n        try {\n            const response = await axios.get(`${backendURL}/exam/review/`, {\n                headers: {\n                    examID: this.props.match.params.examID,\n                    collegeID: secureStorage.getItem(\"collegeID\"),\n                },\n            });\n            const { exam, answer } = response.data;\n            var answers = JSON.parse(answer.answers);\n            const questions = exam.Questions;\n            var marks = 0;\n            const questionAnswer = [];\n            answers.map((item, index) => {\n                const mainQuestion = questions[index];\n                questionAnswer.push({\n                    ...mainQuestion,\n                    correct: mainQuestion.options[mainQuestion.answer] === item,\n                });\n                if (mainQuestion.options[mainQuestion.answer] === item) {\n                    marks += parseInt(mainQuestion.marks);\n                }\n            });\n            var totalMarks = 0;\n            for (var index in exam.Questions) {\n                totalMarks += parseInt(exam.Questions[index][\"marks\"]);\n            }\n            this.setState({\n                exam,\n                answer,\n                questionAnswer,\n                marksObtained: marks,\n                loading: false,\n                totalMarks,\n            });\n        } catch (error) {\n            console.log(error.message);\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render() {\n        const {\n            questionAnswer,\n            loading,\n            marksObtained,\n            exam,\n            totalMarks,\n            answer,\n        } = this.state;\n        return (\n            <div>\n                <div\n                    style={{\n                        margin: \"0px auto\",\n                        maxWidth: \"68rem\",\n                    }}\n                >\n                    <Grid\n                        style={{\n                            marginTop: \"1rem\",\n                        }}\n                        container\n                        direction=\"row\"\n                        justify=\"space-between\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item>\n                            <Typography variant=\"h4\">Review Answers</Typography>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                startIcon={<ArrowBack />}\n                                onClick={() => this.props.history.goBack()}\n                            >\n                                Back\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <Divider\n                        style={{\n                            marginTop: \"1rem\",\n                            marginBottom: \"1rem\",\n                        }}\n                    />\n                    {loading ? (\n                        [...Array(4)].map((d, i) => {\n                            return (\n                                <Typography\n                                    key={i}\n                                    component=\"div\"\n                                    variant=\"h2\"\n                                >\n                                    <Skeleton />\n                                </Typography>\n                            );\n                        })\n                    ) : (\n                        <div style={{ margin: \"0 1rem\" }}>\n                            <Typography variant=\"h5\">Details</Typography>\n                            <Divider />\n                            <Card\n                                variant=\"outlined\"\n                                elevation={4}\n                                style={{ margin: \"1rem auto\" }}\n                            >\n                                <CardContent>\n                                    <Typography\n                                        variant=\"subtitle2\"\n                                        color=\"textPrimary\"\n                                    >\n                                        Title: {`${exam.title}`}\n                                    </Typography>\n                                    <Typography\n                                        variant=\"subtitle2\"\n                                        color=\"textPrimary\"\n                                    >\n                                        Subtitle: {`${exam.subTitle}`}\n                                    </Typography>\n                                    <Typography\n                                        variant=\"subtitle2\"\n                                        color=\"textPrimary\"\n                                    >\n                                        Marks Obtained:{\" \"}\n                                        {`${marksObtained}/${totalMarks}`}\n                                    </Typography>\n                                    <Typography\n                                        variant=\"subtitle2\"\n                                        color=\"textPrimary\"\n                                    >\n                                        Tab switching count:{\" \"}\n                                        {answer.tabSwitched}\n                                    </Typography>\n                                    <Typography\n                                        variant=\"subtitle2\"\n                                        color=\"textPrimary\"\n                                    >\n                                        Face warnings: {answer.faceWarnings}\n                                    </Typography>\n                                    {exam.faceSwitchingLimit !== 0 &&\n                                        exam.tabSwitchingLimit !== 0 && (\n                                            <Typography\n                                                variant=\"subtitle2\"\n                                                style={{ color: \"red\" }}\n                                            >\n                                                {(answer.faceWarnings >\n                                                    parseInt(\n                                                        exam.faceSwitchingLimit\n                                                    ) ||\n                                                    answer.tabSwitched >\n                                                        parseInt(\n                                                            exam.tabSwitchingLimit\n                                                        )) &&\n                                                    `You have exceeded the limit of tab switching (${exam.tabSwitchingLimit}) or face warnings (${exam.faceSwitchingLimit}). You will be regarded as fail`}\n                                            </Typography>\n                                        )}\n                                </CardContent>\n                            </Card>\n                            <Typography\n                                variant=\"h5\"\n                                style={{ marginTop: \"2rem\" }}\n                            >\n                                Questions & Answers:\n                            </Typography>\n                            <Divider />\n                            {questionAnswer.map((item, index) => (\n                                <QuestionCard\n                                    item={item}\n                                    key={index}\n                                    index={index + 1}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Review;\n","/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/index.jsx",["131"],"import { Divider, Paper, Typography } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { secureStorage } from \"../../../config\";\nimport useSecureStorage from \"../../../hooks/useSecureStorage\";\nimport Style from \"./exam.module.scss\";\nimport QuestionCard from \"./questionCard\";\nimport QuestionNumberCard from \"./questionNumberCard\";\nimport TimeVideoComponent from \"./timeVideoComponent\";\n\nlet notFocusedCount = 0;\nlet hidden = null;\nlet visibilityChange = null;\nif (typeof document.hidden !== \"undefined\") {\n  // Opera 12.10 and Firefox 18 and later support\n  hidden = \"hidden\";\n  visibilityChange = \"visibilitychange\";\n} else if (typeof document.msHidden !== \"undefined\") {\n  hidden = \"msHidden\";\n  visibilityChange = \"msvisibilitychange\";\n} else if (typeof document.webkitHidden !== \"undefined\") {\n  hidden = \"webkitHidden\";\n  visibilityChange = \"webkitvisibilitychange\";\n}\n\nconst Exam = () => {\n  const his = useHistory();\n  const [isFocused, setIsFocused] = useState(\"show\");\n  const [currentQuestion, setCurrentQuestion] = useState(1);\n\n  const exam = JSON.parse(\n    secureStorage.getItem(secureStorage.getItem(\"selectedQuiz\"))\n  );\n\n  const handleVisibility = () => {\n    if (document[hidden]) {\n      // alert(\"Changed Window\")\n      ++notFocusedCount;\n      // console.log(notFocusedCount);\n      setIsFocused(\"hide\");\n    } else {\n      setIsFocused(\"show\");\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(visibilityChange, handleVisibility, false);\n\n    return () => {\n      document.removeEventListener(visibilityChange, handleVisibility);\n    };\n  }, []);\n\n  const totalQuestions = exam ? exam.Questions.length : 0;\n\n  const [answers, setAnswers] = useSecureStorage(\n    \"answers\",\n    Array.apply(null, Array(totalQuestions)).map(function () {\n      return undefined;\n    })\n  );\n\n  const [warningCount, setWarningCount] = useSecureStorage(\n    `warningCount_answers`,\n    0\n  );\n\n  const onSubmit = () => {\n    const newAnswer = JSON.stringify(answers);\n    const ID = String(exam._id);\n    secureStorage.setItem(`${ID}_answer`, newAnswer);\n    const faceWarningCount = secureStorage.getItem(\"faceWarnings\")\n      ? parseInt(secureStorage.getItem(\"faceWarnings\"))\n      : 0;\n    secureStorage.setItem(`${ID}_faceWarnings`, faceWarningCount);\n    secureStorage.setItem(\"notFocusedCount\", String(notFocusedCount));\n    secureStorage.removeItem(\"selectedQuiz\");\n    secureStorage.removeItem(\"faceWarnings\");\n    secureStorage.removeItem(\"warningCount_answers\");\n    secureStorage.removeItem(\"answers\");\n    his.replace(\"/\");\n  };\n\n  if (!exam || !secureStorage.getItem(\"userImage\")) {\n    return (\n      <>\n        {secureStorage.removeItem(\"answers\")}\n        <Redirect to=\"/\" />;\n      </>\n    );\n  }\n\n  return (\n    <Paper className={Style.main_container}>\n      <Typography variant=\"h4\">{exam.title}</Typography>\n      <Divider />\n      {/* {console.log(isFocused)} */}\n      <Paper variant=\"elevation\" className={Style.components_container}>\n        <QuestionNumberCard\n          totalQuestions={totalQuestions}\n          setCurrentQuestion={setCurrentQuestion}\n          currentQuestion={currentQuestion}\n        />\n        {currentQuestion > totalQuestions ? (\n          <Paper\n            className={Style.question_container}\n            variant=\"outlined\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography variant=\"h4\" style={{ textAlign: \"center\" }}>\n              Congratulations <br></br>Question Paper Submitted!\n            </Typography>\n          </Paper>\n        ) : (\n          <QuestionCard\n            question={exam.Questions[currentQuestion - 1]}\n            currentQuestion={currentQuestion}\n            setCurrentQuestion={setCurrentQuestion}\n            totalQuestions={totalQuestions}\n            answers={answers}\n            setAnswers={setAnswers}\n            onSubmit={onSubmit}\n          />\n        )}\n        <TimeVideoComponent\n          endTime={exam.endTime}\n          warnings={warningCount}\n          setWarnings={setWarningCount}\n        />\n      </Paper>\n    </Paper>\n  );\n};\n\nexport default Exam;\n","/home/viraj007/Desktop/IN03-LeoCode/src/pages/auth/registration/index.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/auth/login/index.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/index.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/config.js",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/home/examCard.jsx",["132","133"],"import {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    makeStyles,\n    Snackbar,\n    Typography,\n} from \"@material-ui/core\";\nimport {\n    CloudDownloadOutlined as DownloadIcon,\n    DoneOutlineOutlined as ExamIcon,\n    PublishTwoTone as SubmitIcon,\n    RateReview as RateReviewIcon,\n} from \"@material-ui/icons\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { backendURL, secureStorage } from \"../../../config\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n        \"& > * + *\": {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst ExamCard = ({ item, index, isadmin, setPasswordOpen, setExamid }) => {\n    const classes = useStyles();\n    const vertical = \"top\",\n        horizontal = \"center\";\n\n    const history = useHistory();\n\n    const EXAMID = item._id;\n    const [savedAnswers, setSavedAnswers] = useState(\n        secureStorage.getItem(`${EXAMID}_answer`)\n    );\n\n    const [answerInfoOpen, setAnswerInfoOpen] = useState(false);\n    const [answerSuccessOpen, setAnswerSuccessOpen] = useState(false);\n    const [reviewEnabled, setReviewEnabled] = useState(item.answer);\n\n    const [isSavedAnswer, setIsSavedAnswer] = useState(\n        savedAnswers !== null && savedAnswers !== undefined\n    );\n\n    const [downloaded, setDownloaded] = useState(\n        secureStorage.getItem(item._id)\n    );\n\n    const [isSubmitted, setSubmitted] = useState(() => {\n        let arr = secureStorage.getItem(\"submittedQuiz\");\n        if (!arr) {\n            return false;\n        }\n        if (arr.find((it) => it === item._id)) {\n            return true;\n        }\n        return false;\n    });\n\n    const [infoOpen, setInfoOpen] = useState(false);\n    const [successOpen, setSuccessOpen] = useState(false);\n    const [msg, setMsg] = useState(\"\");\n\n    const handleAnswerSuccessClick = () => {\n        setAnswerSuccessOpen(true);\n    };\n\n    const handleAnswerSuccessClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setAnswerSuccessOpen(false);\n    };\n\n    const handleInfoClick = () => {\n        setInfoOpen(true);\n    };\n\n    const handleAnswerInfoClick = () => {\n        setAnswerInfoOpen(true);\n    };\n\n    const handleAnswerInfoClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setAnswerInfoOpen(false);\n    };\n\n    const handleInfoClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setInfoOpen(false);\n    };\n\n    const handleSuccessClick = () => {\n        setSuccessOpen(true);\n    };\n\n    const handleSuccessClose = (event, reason) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n\n        setSuccessOpen(false);\n    };\n\n    const formatDate = (date) => {\n        date = new Date(date);\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var ampm = hours >= 12 ? \"pm\" : \"am\";\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour '0' should be '12'\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\n        var strTime = hours + \":\" + minutes + \" \" + ampm;\n        return strTime;\n    };\n\n    const downloadExam = () => {\n        handleInfoClick();\n        axios\n            .get(`${backendURL}/exam/download`, { headers: { id: item._id } })\n            .then((res) => {\n                handleInfoClose();\n                setMsg(\"Paper Downloaded!\");\n                secureStorage.setItem(item._id, res.data);\n                setDownloaded(true);\n                handleSuccessClick();\n            })\n            .catch((err) => {\n                console.log(err);\n                setMsg(\"Something went wrong! Please try again\");\n                handleInfoClose(false);\n                handleSuccessClick();\n            });\n    };\n\n    const submitAnswers = () => {\n        handleAnswerInfoClick();\n        const data = {\n            examID: item._id,\n            collegeID: secureStorage.getItem(\"collegeID\"),\n            answers: savedAnswers,\n            tabSwitched: secureStorage.getItem(\"notFocusedCount\"),\n            faceWarnings: secureStorage.getItem(`${item._id}_faceWarnings`),\n        };\n        axios\n            .post(`${backendURL}/answer/submitAnswers`, data)\n            .then((response) => {\n                handleAnswerInfoClose();\n                // console.log(response.data);\n                setMsg(response.data);\n                // setIsSavedAnswer(false);\n                secureStorage.removeItem(\"notFocusedCount\");\n                let arr = secureStorage.getItem(\"submittedQuiz\");\n                if (!arr) {\n                    arr = [];\n                }\n                setSubmitted(true);\n                setReviewEnabled(true);\n                arr.push(item._id);\n                secureStorage.setItem(\"submittedQuiz\", arr);\n                secureStorage.removeItem(`${data.examID}_answer`);\n                secureStorage.removeItem(`${item._id}_faceWarnings`);\n                handleAnswerSuccessClick();\n            })\n            .catch((error) => {\n                console.log(error.message);\n                setMsg(\"Something went wrong! Please try again\");\n                handleAnswerInfoClose();\n                handleAnswerSuccessClick();\n            });\n    };\n\n    const checkReview = () => {\n        secureStorage.setItem(\"reviewExam\", item);\n        history.push(\"/review\");\n    };\n\n    return (\n        <div>\n            <div className={classes.root}>\n                <Snackbar\n                    open={answerSuccessOpen}\n                    autoHideDuration={3000}\n                    onClose={handleAnswerSuccessClose}\n                    anchorOrigin={{ vertical, horizontal }}\n                    key={vertical + horizontal}\n                >\n                    <Alert\n                        onClose={handleAnswerSuccessClose}\n                        severity={msg.startsWith(\"Ans\") ? \"success\" : \"warning\"}\n                    >\n                        {msg}\n                    </Alert>\n                </Snackbar>\n            </div>\n            <div className={classes.root}>\n                <Snackbar\n                    open={answerInfoOpen}\n                    //   autoHideDuration={3000}\n                    onClose={handleAnswerInfoClose}\n                    anchorOrigin={{ vertical, horizontal }}\n                    key={vertical + horizontal}\n                >\n                    <Alert onClose={handleAnswerInfoClose} severity=\"info\">\n                        Please wait, your answers are being submitted !\n                    </Alert>\n                </Snackbar>\n            </div>\n            <div className={classes.root}>\n                <Snackbar\n                    open={successOpen}\n                    autoHideDuration={3000}\n                    onClose={handleSuccessClose}\n                    anchorOrigin={{ vertical, horizontal }}\n                    key={vertical + horizontal}\n                >\n                    <Alert\n                        onClose={handleSuccessClose}\n                        severity={msg.startsWith(\"P\") ? \"success\" : \"warning\"}\n                    >\n                        {msg}\n                    </Alert>\n                </Snackbar>\n            </div>\n            <div className={classes.root}>\n                <Snackbar\n                    open={infoOpen}\n                    onClose={handleInfoClose}\n                    anchorOrigin={{ vertical, horizontal }}\n                    key={vertical + horizontal}\n                >\n                    <Alert onClose={handleInfoClose} severity=\"info\">\n                        Please wait, Paper is downloading !\n                    </Alert>\n                </Snackbar>\n            </div>\n\n            <Card\n                variant=\"outlined\"\n                elevation={4}\n                style={{ marginTop: \"2rem\" }}\n            >\n                <CardContent>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"space-between\",\n                        }}\n                    >\n                        <Typography color=\"textPrimary\" variant=\"h6\">\n                            {item.title || \"N/A\"}\n                        </Typography>\n\n                        {!isadmin && (\n                            <Typography\n                                variant=\"caption\"\n                                className=\"status_info_text\"\n                            >\n                                {(!downloaded && \"Paper not Dowloaded yet\") ||\n                                    (item.startTime > new Date().valueOf() &&\n                                        \"Exam not started yet\") ||\n                                    (item.endTime < new Date().valueOf() &&\n                                        \"Exam time finished\") ||\n                                    ((isSubmitted || isSavedAnswer) &&\n                                        \"Exam Completed\") ||\n                                    \"Ready to start\"}\n                            </Typography>\n                        )}\n                    </div>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                        {item.subTitle || \"N/A\"}\n                    </Typography>\n                    <Typography color=\"textSecondary\" variant=\"body2\">\n                        <b>Start Time: </b> {formatDate(item.startTime)}\n                    </Typography>\n                    <Typography color=\"textSecondary\" variant=\"body2\">\n                        <b>End Time: </b> {formatDate(item.endTime)}\n                    </Typography>\n                    <Typography color=\"textSecondary\" variant=\"body2\">\n                        <b>Number of Questions: </b> {item.totalQuestions}\n                    </Typography>\n\n                    <Typography color=\"textSecondary\" variant=\"body2\">\n                        <b>Total Marks: </b> {item.totalMarks}\n                    </Typography>\n                    {isadmin && (\n                        <Typography color=\"textSecondary\" variant=\"body2\">\n                            <b>Password: </b> {item.key}\n                        </Typography>\n                    )}\n                </CardContent>\n                <CardActions\n                    style={{ paddingBottom: \"1rem\", paddingLeft: \"1rem\" }}\n                >\n                    {!isadmin && (\n                        <>\n                            {!reviewEnabled ? (\n                                <>\n                                    <Button\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        size=\"small\"\n                                        disabled={\n                                            downloaded ||\n                                            item.endTime < new Date().valueOf()\n                                        }\n                                        startIcon={<DownloadIcon />}\n                                        onClick={downloadExam}\n                                    >\n                                        Download\n                                    </Button>\n                                    <Button\n                                        color=\"secondary\"\n                                        variant=\"contained\"\n                                        size=\"small\"\n                                        disabled={\n                                            !downloaded ||\n                                            !(\n                                                item.startTime <\n                                                    new Date().valueOf() &&\n                                                item.endTime >\n                                                    new Date().valueOf()\n                                            ) ||\n                                            isSubmitted ||\n                                            isSavedAnswer\n                                        }\n                                        onClick={() => {\n                                            setPasswordOpen(true);\n                                            setExamid(item._id);\n                                        }}\n                                        startIcon={<ExamIcon />}\n                                    >\n                                        Start exam\n                                    </Button>\n                                    <Button\n                                        color=\"secondary\"\n                                        variant=\"contained\"\n                                        size=\"small\"\n                                        disabled={isSubmitted || !isSavedAnswer}\n                                        onClick={() => {\n                                            submitAnswers();\n                                        }}\n                                        startIcon={<SubmitIcon />}\n                                    >\n                                        Submit Answers\n                                    </Button>\n                                </>\n                            ) : (\n                                <Button\n                                    color=\"secondary\"\n                                    variant=\"contained\"\n                                    size=\"small\"\n                                    disabled={!reviewEnabled}\n                                    onClick={() => {\n                                        history.push(`/userReview/${item._id}`);\n                                    }}\n                                    startIcon={<SubmitIcon />}\n                                >\n                                    Check Review\n                                </Button>\n                            )}\n                        </>\n                    )}\n                    {isadmin && (\n                        <Button\n                            color=\"primary\"\n                            variant=\"contained\"\n                            size=\"small\"\n                            onClick={() => {\n                                checkReview();\n                            }}\n                            startIcon={<RateReviewIcon />}\n                        >\n                            View Review\n                        </Button>\n                    )}\n                </CardActions>\n            </Card>\n        </div>\n    );\n};\n\nexport default ExamCard;\n","/home/viraj007/Desktop/IN03-LeoCode/src/components/loading.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/home/passwordModal.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/timeVideoComponent.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/questionNumberCard.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/questionCard.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/successDialog.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/loadingDialog.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/QuestionModal.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/admin/form/submitDialog.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/hooks/useSecureStorage.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/review/questionCard.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/countdownTimer.jsx",[],"/home/viraj007/Desktop/IN03-LeoCode/src/pages/user/exam/video/index.jsx",["134"],"import React, { useRef, useEffect, useState } from \"react\";\nimport * as faceapi from \"face-api.js\";\nimport { Snackbar } from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { secureStorage } from \"../../../../config\";\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst VideoComponent = ({ warnings, setWarnings }) => {\n    const videoCompo = useRef(null);\n\n    let stopSetInterval = null;\n\n    const [labeledDescriptors, setLabeledDescriptors] = useState(null);\n    let stream = null;\n    let warningCount = secureStorage.getItem(\"faceWarnings\")\n        ? parseInt(secureStorage.getItem(\"faceWarnings\"))\n        : 0;\n    const [error, setError] = useState(\"\");\n\n    const loadLabeledImages = () => {\n        const labels = [\"Student\"]; // for WebCam\n        return Promise.all(\n            labels.map(async (label) => {\n                const descriptions = [];\n                const images = JSON.parse(secureStorage.getItem(\"userImage\"));\n                for (let i = 0; i < images.length; i++) {\n                    const imgEle = document.createElement(\"img\");\n                    imgEle.src = images[i];\n                    const detections = await faceapi\n                        .detectSingleFace(imgEle)\n                        .withFaceLandmarks()\n                        .withFaceDescriptor();\n\n                    descriptions.push(detections.descriptor);\n                }\n\n                return new faceapi.LabeledFaceDescriptors(label, descriptions);\n            })\n        );\n    };\n\n    async function startVideoListener(e) {\n        const mainVideo = e.target;\n        const videoContainer = document.getElementById(\"canvasContainer\");\n        if (labeledDescriptors) {\n            const canvas = faceapi.createCanvasFromMedia(mainVideo);\n            videoContainer.innerHTML = \"\";\n            videoContainer.append(canvas);\n\n            const faceMatcher = new faceapi.FaceMatcher(\n                labeledDescriptors,\n                0.7\n            );\n\n            const displaySize = {\n                width: videoCompo.current.width,\n                height: videoCompo.current.height,\n            };\n\n            faceapi.matchDimensions(canvas, displaySize);\n\n            stopSetInterval = setInterval(async () => {\n                // console.log(\"Inside interval\");\n                const detections = await faceapi\n                    .detectAllFaces(mainVideo)\n                    .withFaceLandmarks()\n                    .withFaceDescriptors();\n\n                const resizedDetections = faceapi.resizeResults(\n                    detections,\n                    displaySize\n                );\n\n                canvas\n                    .getContext(\"2d\")\n                    .clearRect(0, 0, canvas.width, canvas.height);\n\n                const results = resizedDetections.map((d) => {\n                    return faceMatcher.findBestMatch(d.descriptor);\n                });\n                // console.log(results);\n                if (results.length !== 1) {\n                    warningCount += 1;\n                    secureStorage.setItem(\"faceWarnings\", warningCount);\n                    setError(`Your face is not getting detected.`);\n                    return;\n                }\n                if (results[0]._label !== \"Student\") {\n                    warningCount += 1;\n                    secureStorage.setItem(\"faceWarnings\", warningCount);\n                    setError(`Your face is not getting detected.`);\n                    return;\n                }\n                results.forEach((result, i) => {\n                    const box = resizedDetections[i].detection.box;\n                    const drawBox = new faceapi.draw.DrawBox(box, {\n                        label: result.toString(),\n                    });\n                    drawBox.draw(canvas);\n                });\n            }, 3000);\n        }\n    }\n\n    useEffect(() => {\n        async function setupVideo() {\n            try {\n                const model_path = `${process.env.PUBLIC_URL}/models`;\n                await faceapi.nets.ssdMobilenetv1.loadFromUri(model_path);\n                await faceapi.nets.faceRecognitionNet.loadFromUri(model_path);\n                await faceapi.nets.faceLandmark68Net.loadFromUri(model_path);\n\n                stream = await navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false,\n                });\n\n                videoCompo.current.srcObject = stream;\n                const tempLabel = await loadLabeledImages();\n                setLabeledDescriptors(tempLabel);\n                videoCompo.current.play();\n            } catch (error) {\n                setError(error.message);\n                console.log(error.message);\n            }\n        }\n        setupVideo();\n\n        return function cleanup() {\n            clearInterval(stopSetInterval);\n            // videoCompo.current.pause();\n            if (stream) {\n                stream.getTracks().forEach(function (track) {\n                    track.stop();\n                });\n            }\n        };\n    }, []);\n\n    return (\n        <div\n            id=\"videoContainer\"\n            style={{\n                margin: 0,\n                padding: 0,\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                position: \"relative\",\n            }}\n        >\n            <Snackbar\n                open={error !== \"\"}\n                autoHideDuration={3000}\n                onClose={() => setError(\"\")}\n                anchorOrigin={{ horizontal: \"center\", vertical: \"top\" }}\n            >\n                <Alert severity=\"error\">{error}</Alert>\n            </Snackbar>\n            <div\n                style={{\n                    width: \"300px\",\n                    height: \"240px\",\n                    position: \"absolute\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n                id=\"canvasContainer\"\n            ></div>\n            <video\n                id=\"videoInput\"\n                width=\"300\"\n                height=\"240\"\n                muted\n                ref={videoCompo}\n                onPlay={startVideoListener}\n                autoPlay={false}\n            />\n        </div>\n    );\n};\n\nexport default VideoComponent;\n",{"ruleId":"135","severity":1,"message":"136","line":41,"column":39,"nodeType":"137","messageId":"138","endLine":41,"endColumn":41},{"ruleId":"139","severity":1,"message":"140","line":28,"column":10,"nodeType":"141","messageId":"142","endLine":28,"endColumn":19},{"ruleId":"139","severity":1,"message":"143","line":43,"column":26,"nodeType":"141","messageId":"142","endLine":43,"endColumn":41},{"ruleId":"139","severity":1,"message":"144","line":51,"column":27,"nodeType":"141","messageId":"142","endLine":51,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":116,"column":26,"nodeType":"147","endLine":119,"endColumn":19},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'isFocused' is assigned a value but never used.","Identifier","unusedVar","'setSavedAnswers' is assigned a value but never used.","'setIsSavedAnswer' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'stream' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression"]